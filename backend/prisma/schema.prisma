generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario  Int           @id @default(autoincrement())
  usuario     String        @db.VarChar(15)
  contrasena  String        @db.VarChar(30)
  correo      String        @db.VarChar(45)
  fotoPerfil  Bytes?        @db.Blob
  comunidad   comunidad[]
  publicacion publicacion[]
  miembros    miembros[]
  likes       likes[]
  guardados   guardados[]
  comentarios comentarios[]

  @@map("usuario")
}

model comunidad {
  id_comunidad  Int           @id @default(autoincrement())
  nombre        String        @db.VarChar(25)
  descripcion   String        @db.VarChar(45)
  fotoComunidad Bytes?        @db.Blob
  FKUsuario     Int
  usuario       Usuario       @relation(fields: [FKUsuario], references: [id_usuario], onUpdate: Restrict, map: "FK_UsuarioCreador")
  publicacion   publicacion[]
  miembros      miembros[]

  @@index([FKUsuario], map: "FK_UsuarioCreador")
}

model publicacion {
  id_publicacion Int           @id @default(autoincrement())
  titulo         String        @db.VarChar(30)
  texto          String?       @db.VarChar(100)
  imagen         Bytes?        @db.Blob
  link           String?       @db.VarChar(30)
  FKUsuario      Int
  FKComunidad    Int
  usuario        Usuario       @relation(fields: [FKUsuario], references: [id_usuario], onUpdate: Restrict, map: "FK_UsuarioPost")
  comunidad      comunidad     @relation(fields: [FKComunidad], references: [id_comunidad], onUpdate: Restrict, map: "FK_ComunidadPost")
  likes          likes[]
  guardados      guardados[]
  comentarios    comentarios[]

  @@index([FKUsuario], map: "FK_UsuarioPost")
  @@index([FKComunidad], map: "FK_ComunidadPost")
}

model miembros {
  id_miembro  Int       @id @default(autoincrement())
  FKUsuario   Int
  FKComunidad Int
  usuario     Usuario   @relation(fields: [FKUsuario], references: [id_usuario], onUpdate: Restrict, map: "FK_UsuarioMiembro")
  comunidad   comunidad @relation(fields: [FKComunidad], references: [id_comunidad], onUpdate: Restrict, map: "FK_ComunidadElegida")

  @@index([FKUsuario], map: "FK_UsuarioMiembro")
  @@index([FKComunidad], map: "FK_ComunidadElegida")
}

model likes {
  id_like       Int         @id @default(autoincrement())
  FKUsuario     Int
  FKPublicacion Int
  usuario       Usuario     @relation(fields: [FKUsuario], references: [id_usuario], onUpdate: Restrict, map: "FK_UsuarioLike")
  publicacion   publicacion @relation(fields: [FKPublicacion], references: [id_publicacion], onUpdate: Restrict, map: "FK_PublicacionLike")

  @@index([FKUsuario], map: "FK_UsuarioLike")
  @@index([FKPublicacion], map: "FK_PublicacionLike")
}

model guardados {
  id_guardado   Int         @id @default(autoincrement())
  FKUsuario     Int
  FKPublicacion Int
  usuario       Usuario     @relation(fields: [FKUsuario], references: [id_usuario], onUpdate: Restrict, map: "FK_UsuarioGuardado")
  publicacion   publicacion @relation(fields: [FKPublicacion], references: [id_publicacion], onUpdate: Restrict, map: "FK_PublicacionGuardado")

  @@index([FKUsuario], map: "FK_UsuarioGuardado")
  @@index([FKPublicacion], map: "FK_PublicacionGuardado")
}

model comentarios {
  id_comentario Int         @id @default(autoincrement())
  texto         String      @db.VarChar(255)
  fecha         DateTime    @default(now())
  FKUsuario     Int
  FKPublicacion Int
  usuario       Usuario     @relation(fields: [FKUsuario], references: [id_usuario], onUpdate: Restrict, map: "FK_UsuarioComentario")
  publicacion   publicacion @relation(fields: [FKPublicacion], references: [id_publicacion], onUpdate: Restrict, map: "FK_PublicacionComentario")

  @@index([FKUsuario], map: "FK_UsuarioComentario")
  @@index([FKPublicacion], map: "FK_PublicacionComentario")
}
